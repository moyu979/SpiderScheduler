# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import spider_pb2 as spider__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in spider_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ServerStub(object):
    """定义一个服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartDownload = channel.unary_unary(
                '/Server/StartDownload',
                request_serializer=spider__pb2.downloadRequest.SerializeToString,
                response_deserializer=spider__pb2.Reply.FromString,
                _registered_method=True)
        self.StopDownload = channel.unary_unary(
                '/Server/StopDownload',
                request_serializer=spider__pb2.NullMessage.SerializeToString,
                response_deserializer=spider__pb2.Reply.FromString,
                _registered_method=True)
        self.DownloadUser = channel.unary_unary(
                '/Server/DownloadUser',
                request_serializer=spider__pb2.User.SerializeToString,
                response_deserializer=spider__pb2.Reply.FromString,
                _registered_method=True)
        self.SetPriority = channel.unary_unary(
                '/Server/SetPriority',
                request_serializer=spider__pb2.SetPriorityMessage.SerializeToString,
                response_deserializer=spider__pb2.Reply.FromString,
                _registered_method=True)
        self.AddUser = channel.unary_unary(
                '/Server/AddUser',
                request_serializer=spider__pb2.User.SerializeToString,
                response_deserializer=spider__pb2.Reply.FromString,
                _registered_method=True)
        self.ReloadConf = channel.unary_unary(
                '/Server/ReloadConf',
                request_serializer=spider__pb2.NullMessage.SerializeToString,
                response_deserializer=spider__pb2.Reply.FromString,
                _registered_method=True)
        self.Test = channel.unary_unary(
                '/Server/Test',
                request_serializer=spider__pb2.NullMessage.SerializeToString,
                response_deserializer=spider__pb2.NullMessage.FromString,
                _registered_method=True)


class ServerServicer(object):
    """定义一个服务
    """

    def StartDownload(self, request, context):
        """定义一个远程调用方法
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopDownload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPriority(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReloadConf(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Test(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartDownload': grpc.unary_unary_rpc_method_handler(
                    servicer.StartDownload,
                    request_deserializer=spider__pb2.downloadRequest.FromString,
                    response_serializer=spider__pb2.Reply.SerializeToString,
            ),
            'StopDownload': grpc.unary_unary_rpc_method_handler(
                    servicer.StopDownload,
                    request_deserializer=spider__pb2.NullMessage.FromString,
                    response_serializer=spider__pb2.Reply.SerializeToString,
            ),
            'DownloadUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DownloadUser,
                    request_deserializer=spider__pb2.User.FromString,
                    response_serializer=spider__pb2.Reply.SerializeToString,
            ),
            'SetPriority': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPriority,
                    request_deserializer=spider__pb2.SetPriorityMessage.FromString,
                    response_serializer=spider__pb2.Reply.SerializeToString,
            ),
            'AddUser': grpc.unary_unary_rpc_method_handler(
                    servicer.AddUser,
                    request_deserializer=spider__pb2.User.FromString,
                    response_serializer=spider__pb2.Reply.SerializeToString,
            ),
            'ReloadConf': grpc.unary_unary_rpc_method_handler(
                    servicer.ReloadConf,
                    request_deserializer=spider__pb2.NullMessage.FromString,
                    response_serializer=spider__pb2.Reply.SerializeToString,
            ),
            'Test': grpc.unary_unary_rpc_method_handler(
                    servicer.Test,
                    request_deserializer=spider__pb2.NullMessage.FromString,
                    response_serializer=spider__pb2.NullMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Server', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Server', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Server(object):
    """定义一个服务
    """

    @staticmethod
    def StartDownload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Server/StartDownload',
            spider__pb2.downloadRequest.SerializeToString,
            spider__pb2.Reply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopDownload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Server/StopDownload',
            spider__pb2.NullMessage.SerializeToString,
            spider__pb2.Reply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DownloadUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Server/DownloadUser',
            spider__pb2.User.SerializeToString,
            spider__pb2.Reply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetPriority(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Server/SetPriority',
            spider__pb2.SetPriorityMessage.SerializeToString,
            spider__pb2.Reply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Server/AddUser',
            spider__pb2.User.SerializeToString,
            spider__pb2.Reply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReloadConf(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Server/ReloadConf',
            spider__pb2.NullMessage.SerializeToString,
            spider__pb2.Reply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Test(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Server/Test',
            spider__pb2.NullMessage.SerializeToString,
            spider__pb2.NullMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
